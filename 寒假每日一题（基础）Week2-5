/*
整数二分，两种模板
整数二分相比于浮点数二分就是有边界的特判，避免造成死循环，例如3+4/2向下取整是3，L变为3自此死循环
扩展：789题
*/
#include <iostream>
#include <algorithm>

using namespace std;
typedef long long LL;//注意是否需要用到long long需要算一下

const int MAX=100005;
int a[MAX][2];
int n,k;
bool comparek(int mid){
    LL count=0;
    for(int i=0;i<n;i++){
        count=count+((LL)a[i][0]/mid)*((LL)a[i][1]/mid);//注意要加括号，如果不加括号则会出现自动向下取整导致解不正确
    }
    if(count>=k){
        return true;
    }else{
        return false;
    }
}
int main(){
    cin>>n>>k;
    for(int i=0;i<n;i++){
        cin>>a[i][0]>>a[i][1];
    }
    int l=1;
    int r=1e5;
    while(l<r){//记住格式
        int mid=(l+r+1)/2;
        if(comparek(mid)){
            l=mid;
        }else{
            r=mid-1;
        }
    }
    cout<<l<<endl;
    return 0;
}
